---
title: "All City Model Builder"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(chillR)
library(randomForest)
library(caret)
library(Matrix)
library(xgboost)
library(zoo)
library(parallel)
```

Due to the low amount of bloom date observations, bloom data from nyc and vancouver will be pooled with the other data in order to predict.

```{r}
nyc <- read_csv("Data/new-york-weather-data.csv")
head(nyc)

vancouver <- read_csv("Data/vancouver-weather-data.csv")
head(vancouver)
```

```{r}
nyc_bloom <- read.csv("Data/nyc.csv")
str(nyc_bloom)

vancouver_bloom <- read.csv("Data/vancouver.csv")
str(vancouver_bloom)
```

```{r}
nyc_bloom_2024 <- nyc_bloom %>%
  select(bloom_date,bloom_doy) %>%
  mutate(bloom_date = as.character(bloom_date),
         year = 2024)

vancouver_bloom_only <- vancouver_bloom %>%
  select(bloom_date,bloom_doy) %>%
  mutate(bloom_date = as.character(bloom_date))
```

```{r}
nyc_data_npn <- read_csv("Data/USA-NPN_status_intensity_observations_data.csv") %>%
  filter(Site_ID == 32789,
         Species_ID == 228,
         Update_Datetime != "-9999") %>%
  mutate(Observation_Date = mdy(sub(" .*", "", Update_Datetime)))

nyc_bloom_only <- nyc_data_npn %>%
  arrange(Observation_Date) %>% 
  mutate(year = year(Observation_Date)) %>% 
  group_by(year) %>% 
  summarize(first_flower_index = min(which(Phenophase_Status == 1)),
            bloom_date = strftime(Observation_Date[first_flower_index], format = '%Y-%m-%d'),
            bloom_doy = Day_of_Year[first_flower_index],
            .groups = 'drop') %>% 
  filter(!is.na(bloom_doy)) %>% 
  select(-first_flower_index) %>%
  filter(year %in% 2019:2022) %>%
  rbind(nyc_bloom_2024)
```



```{r}

T_base <- 4  
T_max_cap <- 36  

nyc_GDD <- nyc %>%
  mutate(
    Year = year(DATE),
    TAVG_adj = pmin(TAVG, T_max_cap),
    GDD = ifelse(DATE >= as.Date(paste0(Year, "-01-01")) & DATE <= as.Date(paste0(Year, "-05-16")), 
                 pmax(TAVG_adj - T_base, 0), 0)  
  )
```

```{r}

T_base <- 4  
T_max_cap <- 36  

vancouver_GDD <- vancouver %>%
  mutate(
    Year = year(DATE),
    TAVG_adj = ifelse(is.na(TAVG), NA, pmin(TAVG, T_max_cap))
  ) %>%
  fill(TAVG_adj, .direction = "up") %>%  # Fill missing TAVG_adj values upwards
  fill(TAVG_adj, .direction = "down") %>%
  mutate(
    GDD = ifelse(
      DATE >= as.Date(paste0(Year, "-01-01")) & DATE <= as.Date(paste0(Year, "-05-16")),
      pmax(TAVG_adj - T_base, 0),
      0
    )
  )
```

```{r}
nyc_GDD <- nyc_GDD %>%
  group_by(Year) %>%
  mutate(GDD_cumsum = cumsum(GDD)) %>%
  ungroup()
```

```{r}
vancouver_GDD <- vancouver_GDD %>%
  group_by(Year) %>%
  mutate(GDD_cumsum = cumsum(GDD)) %>%
  ungroup()
```


```{r}
nyc_GDD <- nyc_GDD %>%
  filter(DATE >= as.Date(paste0(Year, "-01-01")) & DATE <= as.Date(paste0(Year, "-05-16"))) %>%
  mutate(JDay = as.numeric(format(DATE, "%j")) - as.numeric(format(as.Date(paste0(Year, "-01-01")), "%j")) + 1)  

gdd_matrix_nyc <- nyc_GDD %>%
  select(Year, JDay, GDD_cumsum) %>%
  pivot_wider(names_from = JDay, values_from = GDD_cumsum, names_prefix = "CUMSUM_GDD_DAY_") %>%
  filter(row_number() <= n()-1) %>%
  select(-CUMSUM_GDD_DAY_137)

head(gdd_matrix_nyc)
```
```{r}
vancouver_GDD <- vancouver_GDD %>%
  filter(DATE >= as.Date(paste0(Year, "-01-01")) & DATE <= as.Date(paste0(Year, "-05-16"))) %>%
  mutate(JDay = as.numeric(format(DATE, "%j")) - as.numeric(format(as.Date(paste0(Year, "-01-01")), "%j")) + 1)  

gdd_matrix_vancouver <- vancouver_GDD %>%
  select(Year, JDay, GDD_cumsum) %>%
  pivot_wider(names_from = JDay, values_from = GDD_cumsum, names_prefix = "CUMSUM_GDD_DAY_") %>%
  filter(row_number() <= n()-1) %>%
  select(-CUMSUM_GDD_DAY_137)

head(gdd_matrix_vancouver)
```
```{r}
nyc_bloom_lag <- nyc_bloom_only %>%
  arrange(bloom_date) %>% 
  mutate(
    last_year_bloom_doy = lag(bloom_doy, 1),
    avg_last_5 = rollapply(bloom_doy, width = 5, FUN = mean, align = "right", fill = NA, partial = TRUE),
    sd_last_5 = rollapply(bloom_doy, width = 5, FUN = sd, align = "right", fill = NA, partial = TRUE),
    avg_last_10 = rollapply(bloom_doy, width = 10, FUN = mean, align = "right", fill = NA, partial = TRUE),
    sd_last_10 = rollapply(bloom_doy, width = 10, FUN = sd, align = "right", fill = NA, partial = TRUE),
    Year = year(bloom_date) 
  ) %>%
  select(-bloom_date,-bloom_doy) 


bloom_2018 <- 103  

# fill in missing 2019 sd
nyc_bloom_lag <- nyc_bloom_lag %>%
  mutate(
    last_year_bloom_doy = ifelse(year == 2019, bloom_2018, last_year_bloom_doy),
    sd_last_5 = ifelse(year == 2019, mean(c(sd_last_5[year == 2021], sd_last_5[year == 2022]), na.rm = TRUE), sd_last_5),
    sd_last_10 = ifelse(year == 2019, mean(c(sd_last_10[year == 2021], sd_last_10[year == 2022]), na.rm = TRUE), sd_last_10)
  )


head(nyc_bloom_lag)
```

```{r}
vancouver_bloom_lag <- vancouver_bloom_only %>%
  arrange(bloom_date) %>% 
  mutate(
    last_year_bloom_doy = lag(bloom_doy, 1),
    avg_last_5 = rollapply(bloom_doy, width = 5, FUN = mean, align = "right", fill = NA, partial = TRUE),
    sd_last_5 = rollapply(bloom_doy, width = 5, FUN = sd, align = "right", fill = NA, partial = TRUE),
    avg_last_10 = rollapply(bloom_doy, width = 10, FUN = mean, align = "right", fill = NA, partial = TRUE),
    sd_last_10 = rollapply(bloom_doy, width = 10, FUN = sd, align = "right", fill = NA, partial = TRUE),
    Year = year(bloom_date) 
  ) %>%
  select(-bloom_date,-bloom_doy)

bloom_2021 <- 108

vancouver_bloom_lag <- vancouver_bloom_lag %>%
  mutate(
    last_year_bloom_doy = ifelse(is.na(last_year_bloom_doy), bloom_2021, last_year_bloom_doy),
    sd_last_5 = ifelse(is.na(sd_last_5), mean(c(sd_last_5[2], sd_last_5[3]), na.rm = TRUE), sd_last_5),
    sd_last_10 = ifelse(is.na(sd_last_10), mean(c(sd_last_10[2], sd_last_10[3]), na.rm = TRUE), sd_last_10)
  ) 

head(vancouver_bloom_lag)
```
```{r}
merged_data_nyc <- right_join(gdd_matrix_nyc,nyc_bloom_lag,by=join_by(Year == Year)) 
bloom_data_nyc  <-  nyc_bloom_only %>% tail(., nrow(merged_data_nyc))

final_data_nyc <- cbind(merged_data_nyc , bloom_doy = bloom_data_nyc$bloom_doy) %>%
  mutate(species = "yedoensis",
         cultivar = "NoneGiven",
         alt = 8.5,
         location="nyc") %>%
  select(-year) # Redundant 
```

```{r}
merged_data_vancouver<- right_join(gdd_matrix_vancouver,vancouver_bloom_lag,by=join_by(Year == Year))
bloom_data_vancouver  <-  vancouver_bloom_only %>% tail(., nrow(merged_data_vancouver))

final_data_vancouver <-cbind(merged_data_vancouver, bloom_doy = bloom_data_vancouver$bloom_doy) %>%
  mutate(species = "yedoensis",
         cultivar = "Akebono",
         alt = 24,
         location="vancouver")
```

## Combine all the datasets

```{r}
final_data_liestal <- read_csv("Data/final_liestal_data.csv") %>%
  mutate(species = "avium",
         cultivar = "NoneGiven",
         alt = 350,
         location="liestal")

final_data_kyoto <- read_csv("Data/final_kyoto_data.csv") %>%
  mutate(species = "jamasakura",
         cultivar = "NoneGiven",
         alt = 44,
         location="kyoto")

final_data_dc <- read_csv("Data/final_dc_data.csv") %>%
  mutate(species = "yedoensis",
         cultivar = "Someiyoshino",
         alt = 0,
         location="dc")

```
```{r}
all_final_data <- rbind(final_data_liestal,final_data_kyoto,final_data_dc,final_data_nyc,final_data_vancouver) 

categorical_vars <- c("species", "cultivar", "location")
dummy_encoder <- dummyVars(~ ., data = all_final_data[, categorical_vars], fullRank = TRUE)
enconded_cat_vars <- predict(dummy_encoder, newdata = all_final_data[, categorical_vars])

all_final_data <- all_final_data %>% 
  select(-all_of(categorical_vars)) %>%
  cbind(as.data.frame(enconded_cat_vars))
```

```{r}
all_final_data$CUMSUM_GDD_DAY_1[is.na(all_final_data$CUMSUM_GDD_DAY_1)] <- 0

for (i in 2:136) {  
  col_name <- paste0("CUMSUM_GDD_DAY_", i)
  prev_col <- paste0("CUMSUM_GDD_DAY_", i - 1)
  
  all_final_data[[col_name]][is.na(all_final_data[[col_name]])] <- all_final_data[[prev_col]][is.na(all_final_data[[col_name]])]
}
```

```{r}
#write.csv(all_final_data,"Data/all_final_data.csv",row.names = F)
```


```{r}
set.seed(490)

# I want test and train set to have a obs with vancouver and nyc to guage performance

vancouver_data <- all_final_data[all_final_data$locationvancouver == 1,]
nyc_data <- all_final_data[all_final_data$locationnyc == 1,]
combined_data <- rbind(vancouver_data, nyc_data)

remaining_data <- all_final_data %>% filter(locationvancouver != 1,
                                            locationnyc != 1)

train_index <- createDataPartition(remaining_data$bloom_doy, p = 0.8, list = FALSE)
train_data <- remaining_data[train_index, ]
test_data <- remaining_data[-train_index, ]

vancouver_train <- vancouver_data[sample(1:nrow(vancouver_data), 2), ]
vancouver_test <- vancouver_data[!rownames(vancouver_data) %in% rownames(vancouver_train), ]

nyc_train <- nyc_data[sample(1:nrow(nyc_data), 2), ]
nyc_test <- nyc_data[!rownames(nyc_data) %in% rownames(nyc_train), ]

train_data <- rbind(train_data,nyc_train,vancouver_train)
test_data <- rbind(test_data,nyc_test,vancouver_test)
```

```{r}
table(train_data$locationnyc)
table(train_data$locationvancouver)
```
```{r}
table(test_data$locationnyc)
table(test_data$locationvancouver)
```


Fix any NAs in cumsum vars for all_final_data


```{r}
set.seed(490)
rf_model <- randomForest(bloom_doy ~ .,
                         data = train_data,
                         ntree = 50,
                         mtry=40)

predictions <- predict(rf_model, test_data)

rmse <- sqrt(mean((predictions - test_data$bloom_doy)^2))
mae <- mean(abs(predictions - test_data$bloom_doy))

cat("RMSE:", rmse, "\n")
cat("MAE:", mae, "\n")
```

```{r}
van_predictions <- predict(rf_model, vancouver_test)

rmse <- sqrt(mean((van_predictions - vancouver_test$bloom_doy)^2))
mae <- mean(abs(van_predictions - vancouver_test$bloom_doy))

cat("RMSE:", rmse, "\n")
cat("MAE:", mae, "\n")
```
```{r}
nyc_predictions <- predict(rf_model, nyc_test)

rmse <- sqrt(mean((nyc_predictions - nyc_test$bloom_doy)^2))
mae <- mean(abs(nyc_predictions - nyc_test$bloom_doy))

cat("RMSE:", rmse, "\n")
cat("MAE:", mae, "\n")
```
Ok mae scores, now to do 3-fold CV to identify the best param combo to minimize mae


```{r}
set.seed(490)

ntree_values <- seq(10, 300, by = 10)  
mtry_values <- seq(5, 140, by = 10)    
nodesize_values <- seq(1, 50, by = 5)  

param_grid <- expand.grid(ntree_values, mtry_values, nodesize_values)

num_cores <- detectCores(logical = F) - 1  

train_control <- trainControl(method = "cv", number = 3)

train_rf <- function(params) {
  nt <- params[1]
  mt <- params[2]
  ns <- params[3]
  
  rf_model <- train(
    bloom_doy ~ .,
    data = train_data,
    method = "rf",
    trControl = train_control,
    tuneGrid = data.frame(mtry = mt),
    ntree = nt,
    nodesize = ns
  )
  
  predictions <- predict(rf_model, test_data)
  van_predictions <- predict(rf_model, vancouver_test)
  nyc_predictions <- predict(rf_model, nyc_test)
  
  rmse <- sqrt(mean((predictions - test_data$bloom_doy)^2))
  mae <- mean(abs(predictions - test_data$bloom_doy))
  
  rmse_van <- sqrt(mean((van_predictions - vancouver_test$bloom_doy)^2))
  mae_van <- mean(abs(van_predictions - vancouver_test$bloom_doy))
  
  rmse_nyc <- sqrt(mean((nyc_predictions - nyc_test$bloom_doy)^2))
  mae_nyc <- mean(abs(nyc_predictions - nyc_test$bloom_doy))
  
  return(data.frame(ntree = nt, mtry = mt, nodesize = ns,
                    RMSE = rmse, MAE = mae, rmse_van=rmse_van, mae_van=mae_van,
                    rmse_nyc = rmse_nyc, mae_nyc=mae_nyc))
}

# Parallel Processing to speed up 
cl <- makeCluster(num_cores)
clusterExport(cl, varlist = c("train_rf", "train_data", "test_data",
                              "train_control", "param_grid","nyc_test","vancouver_test"))
clusterEvalQ(cl, library(randomForest))
clusterEvalQ(cl, library(caret))

results_list <- parLapply(cl, 1:nrow(param_grid), function(i) {
  train_rf(as.numeric(param_grid[i, ]))
})

stopCluster(cl)

results <- bind_rows(results_list)
```
```{r}
#write.csv(results, "Data/all_city_rf_results.csv", row.names = FALSE)
```

```{r}
set.seed(490)

nrounds_values <- c(50,150,200,250) 
max_depth_values <- c(3, 6, 9)
eta_values <- c(0.01, 0.05, 0.1)
min_child_weight_values <- c(1, 3, 5)
subsample_values <- c(0.6, 0.8, 1.0)
colsample_bytree_values <- c(0.6, 0.8, 1.0)
gamma_values <- c(0, 0.1, 1, 5)

param_grid <- expand.grid(nrounds = nrounds_values,
                          max_depth = max_depth_values,
                          eta = eta_values,
                          min_child_weight = min_child_weight_values,
                          subsample = subsample_values,
                          colsample_bytree = colsample_bytree_values,
                          gamma = gamma_values)


num_cores <- detectCores(logical = F) - 1  


train_control <- trainControl(method = "cv", number = 3)


train_xgb <- function(params) {
  nrounds <- params[1]
  max_depth <- params[2]
  eta <- params[3]
  min_child_weight <- params[4]
  subsample <- params[5]
  colsample_bytree <- params[6]
  gamma <- params[7]

   xgb_model <- train(
    bloom_doy ~ .,
    data = train_data,
    method = "xgbTree",
    trControl = train_control,
    tuneGrid = data.frame(nrounds = nrounds, max_depth = max_depth, eta = eta,
                          min_child_weight = min_child_weight, subsample = subsample,
                          colsample_bytree = colsample_bytree, gamma=gamma),
    metric = "MAE",
    objective = "reg:absoluteerror"
  )

  predictions <- predict(xgb_model, test_data)

  rmse <- sqrt(mean((predictions - test_data$bloom_doy)^2))
  mae <- mean(abs(predictions - test_data$bloom_doy))
  
  predictions <- predict(xgb_model, test_data)
  van_predictions <- predict(xgb_model, vancouver_test)
  nyc_predictions <- predict(xgb_model, nyc_test)
  
  rmse <- sqrt(mean((predictions - test_data$bloom_doy)^2))
  mae <- mean(abs(predictions - test_data$bloom_doy))
  
  rmse_van <- sqrt(mean((van_predictions - vancouver_test$bloom_doy)^2))
  mae_van <- mean(abs(van_predictions - vancouver_test$bloom_doy))
  
  rmse_nyc <- sqrt(mean((nyc_predictions - nyc_test$bloom_doy)^2))
  mae_nyc <- mean(abs(nyc_predictions - nyc_test$bloom_doy))

  return(data.frame(nrounds = nrounds, max_depth = max_depth, eta = eta, gamma=gamma,
                    min_child_weight = min_child_weight, subsample = subsample,
                    colsample_bytree = colsample_bytree, RMSE = rmse, MAE = mae,
                    rmse_nyc=rmse_nyc, rmse_van=rmse_van, mae_nyc=mae_nyc,
                    mae_van=mae_van))
}


cl <- makeCluster(num_cores)
clusterExport(cl, varlist = c("train_xgb", "param_grid", "train_data",
                              "test_data", "train_control","vancouver_test",
                              "nyc_test"))
clusterEvalQ(cl, {
  library(xgboost)
  library(caret)
})

results_list <- parLapply(cl, 1:nrow(param_grid), function(i) {
  train_xgb(as.numeric(param_grid[i, ]))
})

stopCluster(cl)

results_xgb <- bind_rows(results_list)
```

```{r}
#write.csv(results_xgb, "Data/all_city_xgb_results.csv", row.names = FALSE)
```
